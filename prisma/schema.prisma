// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model AuthAccount {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("auth_accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// User Management
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Subscription
  subscriptionTier SubscriptionTier @default(FREE)
  subscriptionStatus SubscriptionStatus @default(ACTIVE)
  subscriptionEndsAt DateTime?
  
  // NextAuth Relations
  accounts      AuthAccount[]
  sessions      Session[]
  
  // App Relations
  businessAccounts BusinessAccount[]
  transactions Transaction[]
  categories Category[]
  
  @@map("users")
}

// Chart of Accounts (Business Accounts)
model BusinessAccount {
  id          String      @id @default(cuid())
  name        String
  code        String?
  type        AccountType
  subType     String?
  balance     Decimal     @default(0)
  description String?
  isActive    Boolean     @default(true)
  
  // Relations
  userId       String
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
  debitTransactions  Transaction[] @relation("DebitTransactions")
  creditTransactions Transaction[] @relation("CreditTransactions")
  
  // Bank Integration
  bankAccountId String? @unique
  bankName      String?
  accountNumber String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("business_accounts")
}

// Transactions (Double Entry)
model Transaction {
  id          String   @id @default(cuid())
  date        DateTime
  description String
  reference   String?
  amount      Decimal
  
  // Double Entry
  debitAccountId  String
  creditAccountId String
  debitAccount    BusinessAccount @relation("DebitTransactions", fields: [debitAccountId], references: [id])
  creditAccount   BusinessAccount @relation("CreditTransactions", fields: [creditAccountId], references: [id])
  
  // Categorization
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])
  
  // Bank Integration
  bankTransactionId String? @unique
  bankImported      Boolean @default(false)
  
  // Relations
  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("transactions")
}

// Transaction Categories
model Category {
  id          String  @id @default(cuid())
  name        String
  description String?
  color       String?
  isSystem    Boolean @default(false)
  
  // Relations
  userId       String
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("categories")
}

// Enums
enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}

enum SubscriptionTier {
  FREE
  PREMIUM
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
}
